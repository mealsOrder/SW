#include<iostream>
#include<vector>
#include<algorithm>
#include<queue>
#include<cstring>

using namespace std;

// 이 코드는 8x8 크기의 문자열 보드에서 길이 N의 회문을 찾는 문제입니다. 
// 코드의 주요 부분은 다음과 같습니다

// 8x8 크기의 문자열 보드 s를 선언합니다.
// 10개의 테스트 케이스에 대해 반복 실행합니다.
// 각 테스트 케이스에 대해 다음을 수행합니다:
// 회문의 길이 N을 입력받습니다.
// 8x8 크기의 문자열 보드 s를 입력받습니다.
// 회문의 개수를 저장할 변수 ans를 초기화합니다.
// 각 셀을 검사하여 가로 방향과 세로 방향의 회문을 찾습니다.
// 가로 방향 검사: 현재 위치에서 N-1 만큼 오른쪽으로 갈 수 있는지 확인하고, 
// N개의 문자를 추출하여 뒤집은 문자열과 비교합니다.

// 세로 방향 검사: 현재 위치에서 N-1 만큼 아래로 갈 수 있는지 확인하고, 
// N개의 문자를 추출하여 뒤집은 문자열과 비교합니다.
// 찾은 회문의 개수를 ans에 누적합니다.
// 각 테스트 케이스의 결과를 출력합니다.


// 이 코드는 주어진 문자열 보드에서 회문을 찾는 문제를 해결하는 방법을 보여줍니다. 
// 가로 방향과 세로 방향을 모두 검사하여 회문의 개수를 찾아내는 것이 핵심 로직입니다.

char s[10][10]; // 8x8 크기의 2차원 문자열 배열 선언 넉넉하게 10*10 선언!

int main(){
    int T = 10; // 테스트 케이스 개수

    for(int t=1; t<=T; t++){ // 10회 반복
        int N; // 회문의 길이
        cin >> N; // 회문의 길이 입력받기

        // 8x8 크기의 문자열 보드 입력받기
        for(int i=0; i<8; i++){
            for(int j=0; j<8; j++){
                cin >> s[i][j];
            }
        }

        int ans = 0; // 회문의 개수를 저장할 변수

        // 8x8 보드를 모두 검사
        for(int i=0; i<8; i++){
            for(int j=0; j<8; j++){
                
                // 가로 방향 검사
                if(j+N-1 < 8){ // 현재 위치에서 N-1 만큼 오른쪽으로 갈 수 있는지 확인
                    string a = ""; // 가로 방향 문자열 저장
                    
                    for(int k=j; k<j+N; k++){ // N개의 문자를 가로 방향으로 추출
                        a += s[i][k];
                    }
                    
                    string b = a; // 가로 방향 문자열 복사
                    reverse(a.begin(), a.end()); // 가로 방향 문자열 뒤집기
                    
                    if( b.compare(a) == 0 ){ // 원래 문자열과 뒤집은 문자열이 같으면
                        ans += 1; // 회문 개수 증가
                    }
                }
                
                // 세로 방향 검사
                if(i+N-1 < 8){ // 현재 위치에서 N-1 만큼 아래로 갈 수 있는지 확인
                    string c = ""; // 세로 방향 문자열 저장
                    for(int l=i; l<i+N; l++){ // N개의 문자를 세로 방향으로 추출
                        c += s[l][j];
                    }
                    string d = c; // 세로 방향 문자열 복사
                    reverse(c.begin(), c.end()); // 세로 방향 문자열 뒤집기
                    if(d.compare(c) == 0){ // 원래 문자열과 뒤집은 문자열이 같으면
                        ans += 1; // 회문 개수 증가
                    }
                }

            }
        }
        
        cout << "#" << t << " " << ans << endl; // 결과 출력
    }

    return 0;
}