Title: To store string to array
==============================================================

char charArray[3] = { char,char,char};
char charArray[ ] = { char,char,char};

// hello 라는 문자를 저장하고 싶다 (원칙)
char astr[] = { 'h','e','l','l','o',0 };
string bstr[] = "hello";
char *cstr = "hello"; // 가능한 표현
char *kstr = { 'h','e','l','l','o',0 }; // 이렇게는 안씀

printf("%d", astr); //
printf("%d", bstr);
printf("%d", cstr);

bstr[4] = 0; // 가능
포인터는 어디를 가리키고 있는지 에 따라 인덱스로 접근해서 값을 변경 할 수도 있고 못할 수도 있다!
cstr[4] = 0; // 불가능  >> 이유는? 아래 예제 참고 , rdata 영역의 값을 바꾸려 해서


=================================

bstr = "world"; // x 불가능
	bstr is not variable! but constant

astr, bstr (배열) 은 스텍에 쓰인 변수 이므로 인덱스로 접근하여 변경이 가능하다!	
bstr[0] = 0; // o 가능

cstr (포인터)
cstr = "world" // o 가능
	cstr is variable !
	
cstr[0] = 0; // x 불가능

cstr 은 자기가 가리키는 주소값을 갈아탈 수 있음!
	 그 값 자체는 바꾸지 못함. (현재 hello 는 따로 할당 되어 있는 문자열이 아니고 rdata에 존재하는 문자열 이므로...)

cstr = bstr // o 가능함 

이제 cstr포인터가 스텍에 있는 배열을 가리키므로
cstr[0] = 0 로 변경 가능함!


#include<stdio.h>

int gi = 123;
int gni;
int main(){
	
	int li = 1;
	int lni;
	
	static int sli = 11;
	static int slni;
	printf("%X\n","hello"); // 404:000  // @.rdata r-readOnly
	printf("%X\n",&main);	// 401:530	// @.test
	
	printf("%X\n",&gi); 	// 403:010 // @.data
	printf("%X\n",&gni);	// 407:a20 // @.bss
	
	printf("%X\n",&li); 	// 62f:e1c // @ stack
	printf("%X\n",&lni); 	// 62f:e18 // @ stack
	
	printf("%X\n",&sli);	// 403:014 // @.data
	printf("%X\n",&slni);	// 407:030 // @.bss
	
	return 0;
}
/* 

16 진수 
404000
401530
403010
407A20
62FE1C
62FE18
403014
407030

*/


	