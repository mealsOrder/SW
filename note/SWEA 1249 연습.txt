#include <iostream>
#include <vector>
#include <cstring> // memset 함수를 사용하기 위해 필요

using namespace std;

const int MAX_N = 100;
const int INF = 987654321; // 무한대 값

int N; // 지도의 크기
int map[MAX_N][MAX_N]; // 지도 정보
bool visited[MAX_N][MAX_N]; // 방문 여부 배열

// 상하좌우 이동을 위한 배열
int dx[] = {-1, 1, 0, 0};
int dy[] = {0, 0, -1, 1};

// DFS 함수 정의
void dfs(int x, int y, int cost) {
    // 도착지에 도달한 경우 최소 복구 시간 업데이트
    if (x == N - 1 && y == N - 1) {
        // 최소 복구 시간 갱신
        // 현재 경로의 복구 시간이 더 작은 경우에만 갱신
        answer = min(answer, cost);
        return;
    }

    // 현재 위치 방문 표시
    visited[x][y] = true;

    // 상하좌우 이동
    for (int i = 0; i < 4; ++i) {
        int nx = x + dx[i];
        int ny = y + dy[i];

        // 지도 범위를 벗어나는 경우 continue
        if (nx < 0 || nx >= N || ny < 0 || ny >= N) continue;

        // 이미 방문한 곳이거나 복구가 필요하지 않은 경우 continue
        if (visited[nx][ny] || map[nx][ny] == 0) continue;

        // 다음 위치로 이동하며 복구 시간을 누적
        dfs(nx, ny, cost + map[nx][ny]);
    }

    // 백트래킹을 위해 방문 표시를 해제
    visited[x][y] = false;
}

int main() {
    int T; // 테스트 케이스의 수
    cin >> T;

    for (int tc = 1; tc <= T; ++tc) {
        cin >> N;

        // 지도 정보 입력 받기
        for (int i = 0; i < N; ++i) {
            for (int j = 0; j < N; ++j) {
                cin >> map[i][j];
            }
        }

        // 방문 배열 초기화
        memset(visited, false, sizeof(visited));

        // 출발지(0, 0)부터 시작하여 DFS 수행
        dfs(0, 0, map[0][0]);

        // 결과 출력
        cout << "#" << tc << " " << answer << endl;
    }

    return 0;
}