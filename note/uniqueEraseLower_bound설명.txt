[ unique() ]

unique() 함수는 정렬된 범위에서 중복된 요소를 제거하고 고유한 요소만을 남깁니다.
unique(v.begin(), v.end())를 호출하면 중복된 요소들을 뒤로 보내고, 중복되지 않은 요소들의 첫 번째 주소를 반환합니다.
예시:
v = [1, 3, 5, 5, 7, 9]
auto it = unique(v.begin(), v.end());
이때 it는 v[4]를 가리키게 됩니다. 즉, 중복된 요소인 v[3]을 제거한 상태에서의 첫 번째 고유 요소의 위치를 반환합니다.


[ erase() ]

erase() 함수는 주어진 범위의 요소를 삭제합니다.
unique(v.begin(), v.end())를 사용한 뒤에 erase(it, v.end())를 호출하면, 
중복된 요소들이 제거된 새로운 컨테이너를 얻을 수 있습니다.
예시:
v = [1, 3, 5, 5, 7, 9]
auto it = unique(v.begin(), v.end());
v.erase(it, v.end());
이제 v = [1, 3, 5, 7, 9]가 됩니다.
이렇게 unique()는 중복된 요소를 제거하고 첫 번째 고유 요소의 위치를 반환하며, erase()는 주어진 범위의 요소를 삭제합니다. 이 두 함수를 함께 사용하면 정렬된 배열에서 중복된 요소를 효율적으로 제거할 수 있습니다.

[ lower_bound(v.begin(),v.end(),key); ]

함수가 반환하는 것은 실제 요소의 위치가 아닌 반복자(iterator)이기 때문에, 이를 이용해 요소의 위치를 알아내기 위해서는 추가적인 작업이 필요합니다.

lower_bound(v.begin(), v.end(), r[i])가 반환하는 것은 v 배열에서 r[i] 값 이상의 첫 번째 요소를 가리키는 반복자입니다.

이 반복자에서 v.begin()을 빼면 r[i]가 몇 번째 위치에 있는지를 알 수 있습니다. 왜냐하면 v.begin()은 v 배열의 첫 번째 요소를 가리키는 반복자이고, 두 반복자의 차이는 바로 요소의 인덱스가 되기 때문입니다.

예를 들어, v = [1, 3, 5, 7, 9] 이고 r[i] = 4라면:

lower_bound(v.begin(), v.end(), 4)는 v[2], 즉 5를 가리키는 반복자를 반환합니다.
이 반복자에서 v.begin()을 빼면 2가 됩니다.
따라서 r[i] = 4가 v 배열의 2번째 인덱스에 있다는 것을 알 수 있습니다.
이렇게 lower_bound() 함수가 반환하는 반복자에서 v.begin()을 빼면, 입력된 값이 배열에서 몇 번째 위치에 있는지를 알 수 있습니다.